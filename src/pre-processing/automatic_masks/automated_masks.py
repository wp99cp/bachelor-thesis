import numpy as np
from s2cloudless import S2PixelCloudDetector
from tqdm import tqdm

from config import report_config, INCLUDE_GLACIER, INCLUDE_EXO_LABS, PROCESS_S2_CLOUDLESS, INCLUDE_SURFACE_WATER
from src.datahandler.DataHandler import DataHandler
from src.datahandler.auxiliary_reader.AuxiliaryReader import AuxiliaryData
from src.datahandler.satallite_reader.SentinelL1CReader import SentinelL1CReader
from src.python_helpers.pipeline_config import load_pipeline_config, get_dates


class MaskGenerator:
    """
    Generates the autogenerated mask based on the existing algorithms.

    This uses the ExoLabs classification for snow,
    the JRC surface water mask for water,
    and the S2Cloudless algorithm for clouds.

    The final mask has the following encoding:

    0: background
    1: snow
    2: clouds
    3: water

    """

    def __init__(self):
        self.threshold = 0.4
        self.average_over = 4
        self.dilation_size = 2

    def create_mask(self, bands, surface_water, glacier, exo_labs):
        print(f"Mask generation started...")

        # create an empty mask
        shape = bands.shape
        generated_mask = np.zeros(shape=(shape[1], shape[2]), dtype=np.uint8)

        # step 1: add the surface water mask
        if INCLUDE_SURFACE_WATER and surface_water is not None:
            generated_mask[surface_water == 1] = 3

        # step 2: add the snow mask from exo_lab and from the glacier mask
        if INCLUDE_GLACIER and glacier is not None:
            generated_mask[glacier == 1] = 1
        if INCLUDE_EXO_LABS and exo_labs is not None:
            generated_mask[exo_labs == 1] = 1

        # step 3: add the cloud mask
        if PROCESS_S2_CLOUDLESS:
            clouds = self.__s2_cloudless_prediction(bands)
            generated_mask[clouds == 1] = 2

        return generated_mask

    def __s2_cloudless_prediction(self, bands):
        assert bands.shape[0] == 13, "The S2Cloudless algorithm requires all 13 bands."

        print(f"Running S2Cloudless algorithm...")

        cloud_detector = S2PixelCloudDetector(
            threshold=self.threshold,
            average_over=self.average_over,
            dilation_size=self.dilation_size,
            all_bands=True
        )
        bands_trans = np.transpose(bands, (1, 2, 0))
        bands_trans = bands_trans.astype(np.float32)
        bands_trans /= 10_000.0
        scene_cloud_prob = cloud_detector.get_cloud_probability_maps(bands_trans[np.newaxis, ...])
        cloud_mask = cloud_detector.get_mask_from_prob(scene_cloud_prob, threshold=0.4)
        print(f"Cloud mask shape: {cloud_mask.shape}")
        print(f"Min/ max cloud mask: {np.min(cloud_mask)}, {np.max(cloud_mask)}")

        print(f"S2Cloudless algorithm finished.")
        return cloud_mask[0]


def main():
    pipeline_config = load_pipeline_config()

    # check if auto_annotation is enabled
    if not pipeline_config['ground_truth_masks']['auto_annotation']:
        print("Auto annotation is disabled. Exiting...")
        return

    assert pipeline_config['satellite'] == 'sentinel2', "Only Sentinel-2 is supported for auto annotation."

    dates = get_dates(pipeline_config)
    tile_id = pipeline_config['tile_id']

    mask_generator = MaskGenerator()
    dataloader = DataHandler(satelliteReader=SentinelL1CReader())

    for date in tqdm(dates):
        print(f"Creating mask for scene {tile_id} - {date}...")

        # open the scene
        dataloader.open_scene(tile_id, date)

        # retrieve bands and auxiliary data
        bands = dataloader.get_bands()

        coverage = dataloader.get_satellite_data_coverage()

        surface_water = dataloader.get_auxiliary_data(auxiliary_data=AuxiliaryData.SURFACE_WATER)
        glacier = dataloader.get_auxiliary_data(auxiliary_data=AuxiliaryData.GLACIER)

        exo_labs = dataloader.get_exo_labs(my_encoding=True)

        # create the mask using the mask generator
        mask = mask_generator.create_mask(bands, surface_water, glacier, exo_labs)

        # save the mask to disk
        dataloader.save_masks(np.stack([mask, coverage], axis=0))

        # close the scene
        dataloader.close_scene()

        print("Finished creating masks.")


if __name__ == "__main__":
    report_config()
    main()
